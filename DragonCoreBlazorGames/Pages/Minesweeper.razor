@page "/minesweeper"
@using System
@using System.Timers

@using System.Text.RegularExpressions

@inject IJSRuntime JSRuntime

<div class="game-title">
    <i class="fas fa-bomb"></i>
    <h1>Minesweeper</h1>
</div>

<audio id="clickSound" preload="auto">
    <source src="sounds/click.mp3" type="audio/mpeg">
</audio>
<audio id="explosionSound" preload="auto">
    <source src="sounds/explosion.mp3" type="audio/mpeg">
</audio>
<audio id="flagSound" preload="auto">
    <source src="sounds/flag.mp3" type="audio/mpeg">
</audio>
<audio id="winSound" preload="auto">
    <source src="sounds/win.mp3" type="audio/mpeg">
</audio>

@* Add this after the <h1> but before the game container *@
<div class="game-options">
    <label>Board Size:</label>
    <select @onchange="@(e => ChangeBoardSize(e.Value.ToString()))" value="@currentSize">
        <option value="10">10x10 (10 mines)</option>
        <option value="20">20x20 (40 mines)</option>
        <option value="30">30x30 (90 mines)</option>
    </select>
</div>

<div class="game-container">
    <div class="game-header">
        <button @onclick="NewGame">New Game</button>
        <span class="mines-left">@MinesLeft</span> Mines Left
        <span class="timer">@FormattedTime</span>
        <span class="game-state">@GameStateString</span>
    </div>
    <div class="game-board">
        @for (int row = 0; row < Rows; row++)
        {
            <div class="game-row">
                @for (int col = 0; col < Cols; col++)
                {
                    int r = row; // create a local copy of i for each iteration
                    int c = col; // create a local copy of i for each iteration
                    var revealed = CellRevealed[r, c];
                    var cell = CellContents[r, c];
                    var flagged = CellFlagged[r, c];
                    <div class="game-cell @(revealed ? "revealed" : "hidden") @(revealed && CellMined[r, c] ? "mine-exploded" : "") @(flagged ? "flagged" : "") revealed-@(cell)"
                         @onclick="@(() => ClickCell(r, c))"
                         @oncontextmenu="@((e) => FlagCell(r, c))"
                         @onclick:preventDefault
                         @oncontextmenu:preventDefault>
                        @(flagged ? "🚩" : cell)
                    </div>
                }
            </div>
        }
    </div>
    <div class="leaderboard">
        <h2>Best Times for @currentSize x @currentSize Board</h2>
        @if (!leaderboard.Any())
        {
            <p>No records yet. Be the first to win!</p>
        }
        else
        {
            <table>
                <thead>
                    <tr>
                        <th>Rank</th>
                        <th>Time</th>
                        <th>Date</th>
                    </tr>
                </thead>
                <tbody>
                    @for (int i = 0; i < leaderboard.Count; i++)
                    {
                        var entry = leaderboard[i];
                        <tr>
                            <td>#@(i + 1)</td>
                            <td>@TimeSpan.FromSeconds(entry.Time).ToString(@"mm\:ss")</td>
                            <td>@entry.Date.ToShortDateString()</td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>
</div>

<style>
    .game-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        font-family: Arial, sans-serif;
        margin: 20px;
        width: 100%;
        max-width: 95vw;
    }

    .game-header {
        display: flex;
        align-items: center;
        justify-content: center;
        margin-bottom: 20px;
        gap: 20px;
    }

    .game-board {
        border: 2px solid #999;
        display: flex;
        flex-direction: column;
        padding: 5px;
        overflow: auto;
        max-height: 80vh;
        width: @(ContainerSize);
        margin: 0 auto;
    }

    .game-row {
        display: flex;
    }

    .game-cell {
        width: @(CellSize);
        height: @(CellSize);
        border: 1px solid #ccc;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: calc(@(CellSize) * 0.6);  /* Adjust font size relative to cell size */
        font-weight: bold;
        user-select: none;
        background-color: #c0c0c0;
        transition: all 0.2s ease-in-out;
        cursor: pointer;
        box-shadow: inset -2px -2px #808080, inset 2px 2px #fff;
    }

        .game-cell:hover:not(.revealed) {
            background-color: #d0d0d0;
            transform: scale(1.1);
        }

        .game-cell.revealed {
            background-color: #eee;
            box-shadow: none;
            border: 1px solid #999;
            animation: reveal 0.3s ease-out;
        }

        .game-cell.mine-exploded {
            background-color: #ff0000;
            animation: explode 0.5s ease-out;
        }

        .game-cell.flagged {
            color: #ff0000;
            animation: flag 0.3s ease-out;
        }

    .mines-left {
        font-size: 18px;
        color: #e74c3c;
        padding: 5px 10px;
        border-radius: 4px;
        background-color: #f8f9fa;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .game-state {
        font-size: 18px;
        padding: 5px 10px;
        border-radius: 4px;
        animation: fadeIn 0.5s ease-out;
    }

@@keyframes reveal {
    0% {
        transform: scale(0.8);
        opacity: 0.5;
    }
    100% {
        transform: scale(1);
        opacity: 1;
    }
}

@@keyframes explode {
    0% {
        transform: scale(1);
        background-color: #ff0000;
    }
    50% {
        transform: scale(1.2);
        background-color: #ff4444;
    }
    100% {
        transform: scale(1);
        background-color: #ff0000;
    }
}

@@keyframes flag {
    0% {
        transform: scale(0.8) rotate(-15deg);
    }
    50% {
        transform: scale(1.1) rotate(15deg);
    }
    100% {
        transform: scale(1) rotate(0deg);
    }
}

    .game-header {
        display: flex;
        align-items: center;
        justify-content: center;
        margin-bottom: 20px;
        gap: 20px;
    }

        .game-header button {
            padding: 8px 16px;
            font-size: 16px;
            background-color: #4CAF50;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }

            .game-header button:hover {
                background-color: #45a049;
            }

    .mines-left {
        font-size: 18px;
        color: #e74c3c;
        padding: 5px 10px;
        border-radius: 4px;
        background-color: #f8f9fa;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .game-state {
        font-size: 18px;
        padding: 5px 10px;
        border-radius: 4px;
        animation: fadeIn 0.5s ease-out;
    }

@@keyframes fadeIn {
    from {
        opacity: 0;
        transform: translateY(-10px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

    .game-options {
        margin-bottom: 20px;
        text-align: center;
    }

    .game-options select {
        margin-left: 10px;
        padding: 5px;
        font-size: 16px;
        border-radius: 4px;
        border: 1px solid #ccc;
    }

    .game-options label {
        font-size: 16px;
        margin-right: 10px;
    }

    .game-cell.revealed-1 {
        color: blue;
    }
    .game-cell.revealed-2 {
        color: green;
    }
    .game-cell.revealed-3 {
        color: red;
    }
    .game-cell.revealed-4 {
        color: darkblue;
    }
    .game-cell.revealed-5 {
        color: brown;
    }
    .game-cell.revealed-6 {
        color: cyan;
    }
    .game-cell.revealed-7 {
        color: black;
    }
    .game-cell.revealed-8 {
        color: gray;
    }

    .timer {
        font-size: 18px;
        color: #2c3e50;
        padding: 5px 10px;
        border-radius: 4px;
        background-color: #f8f9fa;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        font-family: monospace;
        min-width: 60px;
        text-align: center;
    }

    .leaderboard {
        margin-top: 30px;
        text-align: center;
        width: 100%;
        max-width: 500px;
    }

    .leaderboard h2 {
        color: #2c3e50;
        margin-bottom: 20px;
    }

    .leaderboard table {
        width: 100%;
        border-collapse: collapse;
        background-color: #f8f9fa;
        border-radius: 8px;
        overflow: hidden;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .leaderboard th,
    .leaderboard td {
        padding: 12px;
        text-align: center;
        border-bottom: 1px solid #dee2e6;
    }

    .leaderboard th {
        background-color: #4CAF50;
        color: white;
        font-weight: bold;
    }

    .leaderboard tr:nth-child(even) {
        background-color: #f2f2f2;
    }

    .leaderboard tr:hover {
        background-color: #e9ecef;
    }

    .leaderboard tr:first-child {
        font-weight: bold;
        color: #e74c3c;
    }
</style>
@code {
    private int currentSize = 10;
    private int Rows => currentSize;
    private int Cols => currentSize;
    private int Mines => currentSize switch
    {
        10 => 10,
        20 => 40,
        30 => 90,
        _ => 10
    };

    private string[,] CellContents;
    private bool[,] CellRevealed;
    private bool[,] CellFlagged;
    private bool[,] CellMined;
    private int[,] NeighborMineCounts;

    private void InitializeArrays()
    {
        CellContents = new string[Rows, Cols];
        CellRevealed = new bool[Rows, Cols];
        CellFlagged = new bool[Rows, Cols];
        CellMined = new bool[Rows, Cols];
        NeighborMineCounts = new int[Rows, Cols];
    }

    private int MinesLeft => Mines - CountFlagged();
    private bool GameLost { get; set; }
    private bool GameWon { get; set; }
    //private bool GameLost => CellRevealed.Cast<bool>().Contains(true) && CellMined.Cast<bool>().Contains(true);
    //private bool GameWon => !CellRevealed.Cast<bool>().Contains(false) && CountFlagged() == Mines;

    private string GameStateString
    {
        get
        {
            if (GameLost)
            {
                return "You lost :(";
            }
            else if (GameWon)
            {
                return "You won!";
            }
            else
            {
                return "";
            }
        }
    }

    private Timer? gameTimer;
    private int elapsedSeconds = 0;
    private bool gameStarted = false;

    private string FormattedTime => TimeSpan.FromSeconds(elapsedSeconds).ToString(@"mm\:ss");

    private void StartTimer()
    {
        if (gameTimer == null)
        {
            gameTimer = new Timer(1000);
            gameTimer.Elapsed += (sender, e) =>
            {
                elapsedSeconds++;
                InvokeAsync(StateHasChanged);
            };
            gameTimer.Start();
        }
    }

    private void StopTimer()
    {
        if (gameTimer != null)
        {
            gameTimer.Stop();
            gameTimer.Dispose();
            gameTimer = null;
        }
    }

    private void NewGame()
    {
        StopTimer();
        gameStarted = false;
        elapsedSeconds = 0;
        // Reset game state flags
        GameLost = false;
        GameWon = false;

        // Reset game state
        InitializeArrays();

        // Plant mines
        Random rand = new Random();
        int minesPlanted = 0;
        while (minesPlanted < Mines)
        {
            int row = rand.Next(Rows);
            int col = rand.Next(Cols);
            if (!CellMined[row, col])
            {
                CellMined[row, col] = true;
                minesPlanted++;
            }
        }

        // Compute neighbor mine counts
        for (int row = 0; row < Rows; row++)
        {
            for (int col = 0; col < Cols; col++)
            {
                if (CellMined[row, col])
                {
                    continue;
                }

                int count = 0;
                foreach (var neighbor in GetNeighbors(row, col))
                {
                    if (CellMined[neighbor.row, neighbor.col])
                    {
                        count++;
                    }
                }
                NeighborMineCounts[row, col] = count;
            }
        }
    }

    private int CountUnrevealed()
    {
        int count = 0;
        for (int row = 0; row < Rows; row++)
        {
            for (int col = 0; col < Cols; col++)
            {
                if (!CellRevealed[row, col])
                {
                    count++;
                }
            }
        }
        return count;
    }

    private async Task ClickCell(int row, int col)
    {
        if (GameLost || GameWon || CellFlagged[row, col])
        {
            return;
        }

        if (!gameStarted)
        {
            gameStarted = true;
            StartTimer();
        }

        if (CellMined[row, col])
        {
            CellRevealed[row, col] = true;
            CellContents[row, col] = "💣";
            await PlaySound("explosionSound");
            await Task.Delay(100);
            GameLost = true;
            StopTimer();
            RevealMines();
            return;
        }

        await PlaySound("clickSound");
        RevealCell(row, col);

        if (CountFlagged() == Mines && CountUnrevealed() == Mines)
        {
            GameWon = true;
            StopTimer();
            await PlaySound("winSound");
            await SaveLeaderboardEntry();  // Add this line
        }
    }

    private async Task FlagCell(int row, int col)
    {
        if (CellRevealed[row, col] || GameLost || GameWon)  // Add check for game over states
        {
            return;
        }

        CellFlagged[row, col] = !CellFlagged[row, col];
        await PlaySound("flagSound");
    }

    private void RevealCell(int row, int col)
    {
        if (CellRevealed[row, col])
        {
            return;
        }

        CellRevealed[row, col] = true;
        if (NeighborMineCounts[row, col] == 0)
        {
            CellContents[row, col] = "";
            foreach (var neighbor in GetNeighbors(row, col))
            {
                RevealCell(neighbor.row, neighbor.col);
            }
        }
        else
        {
            CellContents[row, col] = NeighborMineCounts[row, col].ToString();
        }
    }

    private void RevealMines()
    {
        for (int row = 0; row < Rows; row++)
        {
            for (int col = 0; col < Cols; col++)
            {
                if (CellMined[row, col] && !CellRevealed[row, col]) // Only reveal mines that aren't already revealed
                {
                    CellContents[row, col] = "💣";
                    CellRevealed[row, col] = true;
                }
            }
        }
    }

    private IEnumerable<(int row, int col)> GetNeighbors(int row, int col)
    {
        int[] offsets = { -1, 0, 1 };
        foreach (int rowOffset in offsets)
        {
            foreach (int colOffset in offsets)
            {
                if (rowOffset == 0 && colOffset == 0)
                {
                    continue;
                }

                int neighborRow = row + rowOffset;
                int neighborCol = col + colOffset;
                if (neighborRow < 0 || neighborRow >= Rows || neighborCol < 0 || neighborCol >= Cols)
                {
                    continue;
                }

                yield return (neighborRow, neighborCol);
            }
        }
    }

    private int CountFlagged()
    {
        int count = 0;
        for (int row = 0; row < Rows; row++)
        {
            for (int col = 0; col < Cols; col++)
            {
                if (CellFlagged[row, col])
                {
                    count++;
                }
            }
        }
        return count;
    }

    private async Task PlaySound(string soundId)
    {
        await JSRuntime.InvokeVoidAsync("playSound", soundId);
    }

    private async Task ChangeBoardSize(string size)
    {
        if (int.TryParse(size, out int newSize))
        {
            currentSize = newSize;
            InitializeArrays();
            NewGame();
            leaderboard = await LoadLeaderboard(currentSize);  // Load leaderboard for new size
        }
    }

    protected override async Task OnInitializedAsync()
    {
        InitializeArrays();
        NewGame();
        leaderboard = await LoadLeaderboard(currentSize);
    }

    // Update the cell size based on board size
    private string CellSize => currentSize switch
    {
        10 => "25px",
        20 => "23px",  // Increased from 20px
        30 => "20px",  // Increased from 15px
        _ => "25px"
    };

    // Add a container size property to control the overall board size
    private string ContainerSize => currentSize switch
    {
        10 => "auto",
        20 => "500px",  // Fixed width for 20x20
        30 => "640px",  // Fixed width for 30x30
        _ => "auto"
    };

    // Update the cell class to include the number colors
    private string GetCellClass(bool revealed, bool mined, bool flagged, string content)
    {
        var classes = new List<string>();
        
        if (revealed)
        {
            classes.Add("revealed");
            if (mined)
            {
                classes.Add("mine-exploded");
            }
            else if (int.TryParse(content, out int number))
            {
                classes.Add($"revealed-{number}");
            }
        }
        
        if (flagged)
        {
            classes.Add("flagged");
        }
        
        return string.Join(" ", classes);
    }

    public void Dispose()
    {
        StopTimer();
    }

    // Add this to the @code block
    private class LeaderboardEntry
    {
        public int BoardSize { get; set; }
        public int Time { get; set; }
        public DateTime Date { get; set; }
    }

    private List<LeaderboardEntry> leaderboard = new();
    private const int MaxLeaderboardEntries = 5;

    private async Task SaveLeaderboardEntry()
    {
        if (GameWon)
        {
            var entry = new LeaderboardEntry
            {
                BoardSize = currentSize,
                Time = elapsedSeconds,
                Date = DateTime.Now
            };

            var existingEntries = await LoadLeaderboard(currentSize);
            existingEntries.Add(entry);
            
            // Sort by time and take top 5
            var topEntries = existingEntries
                .OrderBy(e => e.Time)
                .Take(MaxLeaderboardEntries)
                .ToList();

            await JSRuntime.InvokeVoidAsync(
                "localStorage.setItem",
                $"minesweeper-leaderboard-{currentSize}",
                System.Text.Json.JsonSerializer.Serialize(topEntries)
            );

            leaderboard = await LoadLeaderboard(currentSize);
        }
    }

    private async Task<List<LeaderboardEntry>> LoadLeaderboard(int size)
    {
        try
        {
            var json = await JSRuntime.InvokeAsync<string>(
                "localStorage.getItem",
                $"minesweeper-leaderboard-{size}"
            );

            if (string.IsNullOrEmpty(json))
                return new List<LeaderboardEntry>();

            return System.Text.Json.JsonSerializer.Deserialize<List<LeaderboardEntry>>(json) ?? new List<LeaderboardEntry>();
        }
        catch
        {
            return new List<LeaderboardEntry>();
        }
    }
}
