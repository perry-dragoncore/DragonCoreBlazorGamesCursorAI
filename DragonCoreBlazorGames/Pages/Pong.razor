@page "/pong"
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable
@using Microsoft.AspNetCore.Components.Web

<div class="game-title">
    <i class="fas fa-table-tennis"></i>
    <h1>Pong</h1>
</div>

<audio id="hitSound" preload="auto">
    <source src="sounds/hit.mp3" type="audio/mpeg">
</audio>
<audio id="scoreSound" preload="auto">
    <source src="sounds/score.mp3" type="audio/mpeg">
</audio>

<div class="game-container">
    <div class="game-header">
        <div class="score">@player1Score - @player2Score</div>
        <button class="new-game-btn" @onclick="StartNewGame">New Game</button>
    </div>

    <div class="game-board" tabindex="0" @onkeydown="HandleKeyPress" @onkeydown:preventDefault
         @onkeyup="HandleKeyUp" @onkeyup:preventDefault>
        <div class="paddle player1" style="top: @($"{player1Y}px")"></div>
        <div class="ball" style="left: @($"{ballX}px"); top: @($"{ballY}px")"></div>
        <div class="paddle player2" style="top: @($"{player2Y}px")"></div>
        <div class="center-line"></div>
    </div>

    <div class="controls">
        <div class="control-info">
            <h3>Player 1</h3>
            <p>W: Up</p>
            <p>S: Down</p>
        </div>
        <div class="control-info">
            <h3>Computer AI</h3>
            <p>Auto-controlled</p>
        </div>
    </div>

    @if (gameOver)
    {
        <div class="game-over">
            <h2>Game Over!</h2>
            <p>@(winner == 1 ? "Player 1" : "Computer AI") Wins!</p>
            <button class="new-game-btn" @onclick="StartNewGame">Play Again</button>
        </div>
    }
</div>

<style>
    .game-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        padding: 20px;
        font-family: Arial, sans-serif;
    }

    .game-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        width: 800px;
        margin-bottom: 20px;
    }

    .score {
        font-size: 48px;
        font-weight: bold;
        color: #2c3e50;
    }

    .game-board {
        width: 800px;
        height: 400px;
        background: #2c3e50;
        position: relative;
        border-radius: 10px;
        overflow: hidden;
        outline: none;
    }

    .paddle {
        width: 10px;
        height: 60px;
        background: white;
        position: absolute;
        border-radius: 5px;
        transition: top 0.1s linear;
    }

    .player1 {
        left: 50px;
    }

    .player2 {
        right: 50px;
    }

    .ball {
        width: 10px;
        height: 10px;
        background: white;
        position: absolute;
        border-radius: 50%;
        transition: all 0.016s linear;
    }

    .center-line {
        position: absolute;
        left: 50%;
        top: 0;
        bottom: 0;
        width: 2px;
        background: rgba(255,255,255,0.2);
        transform: translateX(-50%);
    }

    .controls {
        display: flex;
        justify-content: space-around;
        width: 100%;
        max-width: 800px;
        margin-top: 20px;
    }

    .control-info {
        text-align: center;
        padding: 10px;
        background: #f8f9fa;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .control-info h3 {
        margin: 0 0 10px 0;
        color: #2c3e50;
    }

    .control-info p {
        margin: 5px 0;
        color: #666;
    }

    .new-game-btn {
        padding: 10px 20px;
        font-size: 16px;
        background: #3498db;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .new-game-btn:hover {
        background: #2980b9;
        transform: scale(1.05);
    }

    .game-over {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background: white;
        padding: 30px;
        border-radius: 10px;
        text-align: center;
        box-shadow: 0 4px 8px rgba(0,0,0,0.2);
        animation: fadeIn 0.5s ease-out;
    }

    @@keyframes fadeIn {
        from { opacity: 0; }
        to { opacity: 1; }
    }
</style>

@code {
    private const int BoardWidth = 800;
    private const int BoardHeight = 400;
    private const int PaddleHeight = 60;
    private const int PaddleSpeed = 5;
    private const int WinningScore = 5;

    private double player1Y = BoardHeight / 2 - PaddleHeight / 2;
    private double player2Y = BoardHeight / 2 - PaddleHeight / 2;
    private double ballX = BoardWidth / 2;
    private double ballY = BoardHeight / 2;
    private double ballSpeedX = 5;
    private double ballSpeedY = 5;
    private int player1Score = 0;
    private int player2Score = 0;
    private bool gameOver = false;
    private int winner = 0;

    private bool player1Up, player1Down;
    private System.Threading.Timer gameTimer;

    // Add AI difficulty tuning
    private const double AI_REACTION_SPEED = 0.8; // 0-1, higher = faster reactions
    private const double AI_PREDICTION_ERROR = 20; // pixels of random error in prediction

    protected override void OnInitialized()
    {
        StartNewGame();
    }

    private void StartNewGame()
    {
        player1Y = player2Y = BoardHeight / 2 - PaddleHeight / 2;
        ResetBall();
        player1Score = player2Score = 0;
        gameOver = false;
        winner = 0;

        gameTimer?.Dispose();
        gameTimer = new System.Threading.Timer(GameLoop, null, 0, 16); // ~60 FPS
    }

    private void ResetBall()
    {
        ballX = BoardWidth / 2;
        ballY = BoardHeight / 2;
        ballSpeedX = new Random().Next(0, 2) == 0 ? 5 : -5;
        ballSpeedY = new Random().Next(-3, 4);
    }

    private async void GameLoop(object state)
    {
        if (gameOver) return;

        // Move player 1 paddle
        if (player1Up && player1Y > 0) player1Y -= PaddleSpeed;
        if (player1Down && player1Y < BoardHeight - PaddleHeight) player1Y += PaddleSpeed;

        // AI movement
        MoveAIPaddle();

        // Move ball
        ballX += ballSpeedX;
        ballY += ballSpeedY;

        // Ball collision with top and bottom
        if (ballY <= 0 || ballY >= BoardHeight - 10)
        {
            ballSpeedY = -ballSpeedY;
            await PlaySound("hitSound");
        }

        // Ball collision with paddles
        if (ballX <= 60 && ballY >= player1Y && ballY <= player1Y + PaddleHeight)
        {
            ballSpeedX = -ballSpeedX;
            ballSpeedX *= 1.1; // Increase speed
            ballSpeedY += (ballY - (player1Y + PaddleHeight / 2)) / 10;
            await PlaySound("hitSound");
        }
        else if (ballX >= BoardWidth - 70 && ballY >= player2Y && ballY <= player2Y + PaddleHeight)
        {
            ballSpeedX = -ballSpeedX;
            ballSpeedX *= 1.1; // Increase speed
            ballSpeedY += (ballY - (player2Y + PaddleHeight / 2)) / 10;
            await PlaySound("hitSound");
        }

        // Scoring
        if (ballX <= 0)
        {
            player2Score++;
            await PlaySound("scoreSound");
            if (player2Score >= WinningScore)
            {
                EndGame(2);
            }
            else
            {
                ResetBall();
            }
        }
        else if (ballX >= BoardWidth)
        {
            player1Score++;
            await PlaySound("scoreSound");
            if (player1Score >= WinningScore)
            {
                EndGame(1);
            }
            else
            {
                ResetBall();
            }
        }

        await InvokeAsync(StateHasChanged);
    }

    private void EndGame(int winningPlayer)
    {
        gameOver = true;
        winner = winningPlayer;
        gameTimer?.Dispose();
    }

    private void MoveAIPaddle()
    {
        // Only move if ball is moving towards AI
        if (ballSpeedX > 0)
        {
            // Predict where ball will intersect with AI paddle
            double timeToIntercept = (BoardWidth - 70 - ballX) / ballSpeedX;
            double predictedY = ballY + (ballSpeedY * timeToIntercept);

            // Add some randomness to make AI imperfect
            predictedY += new Random().NextDouble() * AI_PREDICTION_ERROR * 2 - AI_PREDICTION_ERROR;

            // Keep prediction within board bounds
            predictedY = Math.Max(0, Math.Min(BoardHeight - 10, predictedY));

            // Calculate target position (center of paddle should align with ball)
            double targetY = predictedY - (PaddleHeight / 2);
            targetY = Math.Max(0, Math.Min(BoardHeight - PaddleHeight, targetY));

            // Move towards target with reaction speed factor
            double difference = targetY - player2Y;
            player2Y += Math.Sign(difference) * PaddleSpeed * AI_REACTION_SPEED;
        }
    }

    private void HandleKeyPress(KeyboardEventArgs e)
    {
        switch (e.Key)
        {
            case "w": player1Up = true; break;
            case "s": player1Down = true; break;
        }
    }

    private void HandleKeyUp(KeyboardEventArgs e)
    {
        switch (e.Key)
        {
            case "w": player1Up = false; break;
            case "s": player1Down = false; break;
        }
    }

    private async Task PlaySound(string soundId)
    {
        await JSRuntime.InvokeVoidAsync("playSound", soundId);
    }

    public void Dispose()
    {
        gameTimer?.Dispose();
    }
}

@code {
    private IJSObjectReference? module;

    protected override async Task OnInitializedAsync()
    {
        module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/pong.js");
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (module is not null)
        {
            await module.DisposeAsync();
        }
    }
}
