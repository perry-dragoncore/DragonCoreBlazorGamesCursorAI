@page "/tictactoe"
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<link href="css/tictactoe.css" rel="stylesheet" />

<div class="game-title">
    <i class="fas fa-times-circle"></i>
    <h1>Tic Tac Toe</h1>
</div>

@if (!gameStarted)
{
    <div class="game-mode-selection">
        <h2>Choose Game Mode</h2>
        <div class="mode-buttons">
            <button class="mode-btn" @onclick="() => StartGame(GameMode.AI)">
                <i class="fas fa-robot"></i>
                Play vs AI
            </button>
            <button class="mode-btn" @onclick="() => StartGame(GameMode.Online)">
                <i class="fas fa-users"></i>
                Play Online
            </button>
        </div>
    </div>
}
else if (isOnlineMode && !isInGame)
{
    <div class="online-setup">
        @if (string.IsNullOrEmpty(gameId))
        {
            <button class="create-game-btn" @onclick="CreateGame">Create New Game</button>
        }
        else
        {
            <div class="game-code-display">
                <h3>Share this code with your friend:</h3>
                <div class="game-code">@gameId</div>
                <button class="copy-btn" @onclick="CopyGameCode">
                    <i class="fas fa-copy"></i> Copy Code
                </button>
            </div>
            <div class="join-game">
                <input @bind="joinCode" placeholder="Enter game code" />
                <button class="join-btn" @onclick="JoinGame">Join Game</button>
            </div>
        }
    </div>
}
else
{
    <div class="game-container">
        <div class="game-header">
            <button @onclick="Reset" class="new-game-btn">New Game</button>
            @if (Winner == "Draw")
            {
                <div class="draw-message">Game Draw!</div>
            }
            else
            {
                <div class="player-info @(CurrentPlayer == 0 ? "active" : "")">
                    <img src="/images/X.png" class="player-icon" />
                    <span>Player 1</span>
                </div>
                <div class="player-info @(CurrentPlayer == 1 ? "active" : "") @(isAIThinking ? "ai-thinking" : "")">
                    <img src="/images/O.png" class="player-icon" />
                    <span>Computer AI</span>
                </div>
            }
        </div>

        <div class="board">
            @for (int i = 0; i < 9; i++)
            {
                int index = i;
                <div class="cell @(winningCells.Contains(index) ? "winning" : "")" 
                     @onclick="() => OnCellClicked(index)">
                    @if (Board[index] != null)
                    {
                        <img src="@Board[index]" class="@(winningCells.Contains(index) ? "winning-piece" : "")" />
                    }
                </div>
            }
        </div>

        <div class="leaderboard">
            <h2>Top Winners</h2>
            @if (!leaderboard.Any())
            {
                <p>No records yet. Play to make history!</p>
            }
            else
            {
                <table>
                    <thead>
                        <tr>
                            <th>Rank</th>
                            <th>Winner</th>
                            <th>Moves</th>
                            <th>Date</th>
                        </tr>
                    </thead>
                    <tbody>
                        @for (int i = 0; i < leaderboard.Count; i++)
                        {
                            var entry = leaderboard[i];
                            <tr>
                                <td>#@(i + 1)</td>
                                <td>
                                    <img src="/images/@(entry.Winner == 0 ? "X" : "O").png" 
                                         class="leaderboard-icon" /> Player @(entry.Winner + 1)
                                </td>
                                <td>@entry.Moves</td>
                                <td>@entry.Date.ToShortDateString()</td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
    </div>
}

@code {
    private enum GameMode { AI, Online }
    private bool gameStarted = false;
    private bool isOnlineMode = false;
    private bool isInGame = false;
    private string gameId;
    private string joinCode;
    //private HubConnection hubConnection;
    private string playerSymbol;
    private bool isMyTurn;

    private string[] Players = new[] { "Player 1", "Computer AI" };
    private string[] Symbols = new[] { "/images/X.png", "/images/O.png" };
    private int CurrentPlayer = 0;
    private string[] Board = new string[9];
    private string Winner = null;
    private List<int> winningCells = new();
    private int moveCount = 0;
    private List<LeaderboardEntry> leaderboard = new();
    private const int MaxLeaderboardEntries = 5;
    private bool isAIThinking = false;
    private Random random = new Random();

    private class LeaderboardEntry
    {
        public int Winner { get; set; }
        public int Moves { get; set; }
        public DateTime Date { get; set; }
    }

    private async Task PlaySound(string soundId)
    {
        await JSRuntime.InvokeVoidAsync("playSound", soundId);
    }

    private async Task OnCellClicked(int index)
    {
        if (Board[index] != null || Winner != null) return;

        if (isOnlineMode)
        {
            if (!isMyTurn) return;

//            await hubConnection.SendAsync("MakeMove", gameId, index);
            await OnOnlineMoveMade(index);
            isMyTurn = false;
        }
        else
        {
            moveCount++;
            Board[index] = Symbols[CurrentPlayer];
            await PlaySound("moveSound");

            if (CheckWinner(Symbols[CurrentPlayer]))
            {
                Winner = Players[CurrentPlayer];
                await PlaySound("winSound");
                await SaveLeaderboardEntry();
                return;
            }
            else if (IsDraw())
            {
                Winner = "Draw";
                return;
            }

            CurrentPlayer = 1;
            isAIThinking = true;
            StateHasChanged();

            await Task.Delay(500);
            await MakeAIMove();

            isAIThinking = false;
        }
    }

    private async Task MakeAIMove()
    {
        var winningMove = FindWinningMove(1);
        if (winningMove != -1)
        {
            await MakeMove(winningMove);
            return;
        }

        var blockingMove = FindWinningMove(0);
        if (blockingMove != -1)
        {
            await MakeMove(blockingMove);
            return;
        }

        if (Board[4] == null)
        {
            await MakeMove(4);
            return;
        }

        var corners = new[] { 0, 2, 6, 8 };
        var availableCorners = corners.Where(i => Board[i] == null).ToList();
        if (availableCorners.Any())
        {
            await MakeMove(availableCorners[random.Next(availableCorners.Count)]);
            return;
        }

        var availableMoves = Enumerable.Range(0, 9).Where(i => Board[i] == null).ToList();
        if (availableMoves.Any())
        {
            await MakeMove(availableMoves[random.Next(availableMoves.Count)]);
        }
    }

    private int FindWinningMove(int player)
    {
        var tempBoard = Board.ToArray();

        for (int i = 0; i < 9; i++)
        {
            if (tempBoard[i] != null) continue;

            tempBoard[i] = Symbols[player];

            if (CheckWinningMove(tempBoard, Symbols[player]))
            {
                return i;
            }

            tempBoard[i] = null;
        }
        return -1;
    }

    private bool CheckWinningMove(string[] boardState, string symbol)
    {
        int[][] winPatterns = new int[][]
        {
            new int[] {0, 1, 2}, new int[] {3, 4, 5}, new int[] {6, 7, 8}, // Rows
            new int[] {0, 3, 6}, new int[] {1, 4, 7}, new int[] {2, 5, 8}, // Columns
            new int[] {0, 4, 8}, new int[] {2, 4, 6} // Diagonals
        };

        foreach (var pattern in winPatterns)
        {
            if (boardState[pattern[0]] == symbol && 
                boardState[pattern[1]] == symbol && 
                boardState[pattern[2]] == symbol)
            {
                return true;
            }
        }

        return false;
    }

    private async Task MakeMove(int index)
    {
        moveCount++;
        Board[index] = Symbols[CurrentPlayer];
        await PlaySound("moveSound");

        if (CheckWinner(Symbols[CurrentPlayer]))
        {
            Winner = Players[CurrentPlayer];
            await PlaySound("winSound");
            await SaveLeaderboardEntry();
        }
        else if (IsDraw())
        {
            Winner = "Draw";
        }
        else
        {
            CurrentPlayer = 0;
        }
    }

    private bool CheckWinner(string symbol)
    {
        int[][] winPatterns = new int[][]
        {
            new int[] {0, 1, 2}, new int[] {3, 4, 5}, new int[] {6, 7, 8}, // Rows
            new int[] {0, 3, 6}, new int[] {1, 4, 7}, new int[] {2, 5, 8}, // Columns
            new int[] {0, 4, 8}, new int[] {2, 4, 6} // Diagonals
        };

        foreach (var pattern in winPatterns)
        {
            if (Board[pattern[0]] == symbol && 
                Board[pattern[1]] == symbol && 
                Board[pattern[2]] == symbol)
            {
                winningCells = pattern.ToList();
                return true;
            }
        }

        return false;
    }

    private async Task SaveLeaderboardEntry()
    {
        var entry = new LeaderboardEntry
        {
            Winner = CurrentPlayer,
            Moves = moveCount,
            Date = DateTime.Now
        };

        var existingEntries = await LoadLeaderboard();
        existingEntries.Add(entry);
        
        var topEntries = existingEntries
            .OrderBy(e => e.Moves)
            .Take(MaxLeaderboardEntries)
            .ToList();

        await JSRuntime.InvokeVoidAsync(
            "localStorage.setItem",
            "tictactoe-leaderboard",
            System.Text.Json.JsonSerializer.Serialize(topEntries)
        );

        leaderboard = await LoadLeaderboard();
    }

    private async Task<List<LeaderboardEntry>> LoadLeaderboard()
    {
        try
        {
            var json = await JSRuntime.InvokeAsync<string>(
                "localStorage.getItem",
                "tictactoe-leaderboard"
            );

            if (string.IsNullOrEmpty(json))
                return new List<LeaderboardEntry>();

            return System.Text.Json.JsonSerializer.Deserialize<List<LeaderboardEntry>>(json) 
                ?? new List<LeaderboardEntry>();
        }
        catch
        {
            return new List<LeaderboardEntry>();
        }
    }

    private async Task Reset()
    {
        CurrentPlayer = 0;
        Board = new string[9];
        Winner = null;
        moveCount = 0;
        winningCells.Clear();
        leaderboard = await LoadLeaderboard();
    }

    protected override async Task OnInitializedAsync()
    {
        leaderboard = await LoadLeaderboard();
    }

    private bool IsDraw()
    {
        if (CheckWinner(Symbols[0]) || CheckWinner(Symbols[1]))
            return false;

        return !Board.Any(cell => cell == null);
    }

    private async Task StartGame(GameMode mode)
    {
        isOnlineMode = mode == GameMode.Online;
        
        if (isOnlineMode)
        {
    //        await InitializeSignalR();
        }
        else
        {
            gameStarted = true;
            await Reset();
        }
    }
/*
    private async Task InitializeSignalR()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl($"{NavigationManager.BaseUri}tictactoehub")
            .WithAutomaticReconnect()
            .Build();

        hubConnection.On<int>("MoveMade", async (position) =>
        {
            if (!isMyTurn)
            {
                await InvokeAsync(async () =>
                {
                    await OnOnlineMoveMade(position);
                    isMyTurn = true;
                    StateHasChanged();
                });
            }
        });

        try
        {
            await hubConnection.StartAsync();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error starting SignalR: {ex.Message}");
        }
    }
*/
    private async Task CreateGame()
    {
        gameId = Guid.NewGuid().ToString("N").Substring(0, 6).ToUpper();
  //      await hubConnection.SendAsync("JoinGame", gameId);
        playerSymbol = "X";
        isMyTurn = true;
    }

    private async Task JoinGame()
    {
        if (!string.IsNullOrEmpty(joinCode))
        {
            //await hubConnection.SendAsync("JoinGame", joinCode);
            gameId = joinCode;
            playerSymbol = "O";
            isMyTurn = false;
            isInGame = true;
            gameStarted = true;
            await Reset();
        }
    }

    private async Task CopyGameCode()
    {
        await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", gameId);
    }

    private async Task OnOnlineMoveMade(int index)
    {
        moveCount++;
        Board[index] = isMyTurn ? playerSymbol : (playerSymbol == "X" ? "O" : "X");
        await PlaySound("moveSound");

        if (CheckWinner(Board[index]))
        {
            Winner = isMyTurn ? "You" : "Opponent";
            await PlaySound("winSound");
            await SaveLeaderboardEntry();
        }
        else if (IsDraw())
        {
            Winner = "Draw";
        }
    }

    public async ValueTask DisposeAsync()
    {
        /*
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
        */
    }
}
