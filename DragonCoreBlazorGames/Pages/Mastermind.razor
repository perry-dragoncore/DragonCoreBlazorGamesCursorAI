@page "/mastermind"
@inject IJSRuntime JSRuntime

<div class="game-title">
    <i class="fas fa-key"></i>
    <h1>Mastermind</h1>
</div>

@* Add these audio elements after the <h1> *@
<audio id="clickSound" preload="auto">
    <source src="sounds/click.mp3" type="audio/mpeg">
</audio>
<audio id="submitSound" preload="auto">
    <source src="sounds/submit.mp3" type="audio/mpeg">
</audio>
<audio id="winSound" preload="auto">
    <source src="sounds/win.mp3" type="audio/mpeg">
</audio>
<audio id="loseSound" preload="auto">
    <source src="sounds/lose.mp3" type="audio/mpeg">
</audio>

<div class="game-container">
    <div class="game-header">
        <button class="new-game-btn" @onclick="NewGame">New Game</button>
        <div class="current-attempt">Attempt: @(currentRow + 1) / @numberOfRows</div>
    </div>

    <div class="mastermind-board">
        @for (int row = 0; row < numberOfRows; row++)
        {
            var currentRowIndex = row;
            <div class="mastermind-row @(currentRow == row ? "active" : "")">
                <div class="pegs">
                    @for (int col = 0; col < numberOfColumns; col++)
                    {
                        var currentCol = col;
                        <div class="peg @GetPegClass(currentRowIndex, currentCol)" 
                             @onclick="() => SelectColor(currentRowIndex, currentCol)">
                        </div>
                    }
                </div>
                <div class="feedback">
                    @if (submittedRows[row])
                    {
                        var feedback = rowFeedback[row];
                        @for (int i = 0; i < feedback.Correct; i++)
                        {
                            <div class="feedback-peg correct"></div>
                        }
                        @for (int i = 0; i < feedback.WrongPosition; i++)
                        {
                            <div class="feedback-peg wrong-position"></div>
                        }
                        @for (int i = 0; i < numberOfColumns - feedback.Correct - feedback.WrongPosition; i++)
                        {
                            <div class="feedback-peg empty"></div>
                        }
                    }
                </div>
            </div>
        }
    </div>

    <div class="color-picker">
        <div class="colors">
            @for (int i = 0; i < 6; i++)
            {
                var colorIndex = i;
                <div class="color-option color-@(colorIndex)" @onclick="() => SetSelectedColor(colorIndex)"></div>
            }
        </div>
        <button class="submit-btn" @onclick="SubmitGuess" disabled="@(!CanSubmit())">Submit Guess</button>
    </div>

    @if (gameOver)
    {
        <div class="game-over">
            <h2>@(isWin ? "Congratulations! You've won!" : "Game Over!")</h2>
            <button class="new-game-btn" @onclick="NewGame">Play Again</button>
        </div>
    }
</div>

<style>
    .game-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        padding: 20px;
        font-family: Arial, sans-serif;
    }

    .game-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        width: 100%;
        max-width: 400px;
        margin-bottom: 20px;
    }

    .mastermind-board {
        background: #2c3e50;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0,0,0,0.2);
    }

    .mastermind-row {
        display: flex;
        align-items: center;
        margin: 10px 0;
        padding: 5px;
        border-radius: 5px;
        transition: all 0.3s ease;
    }

    .mastermind-row.active {
        background: rgba(255,255,255,0.1);
    }

    .pegs {
        display: flex;
        gap: 10px;
    }

    .peg {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        background-color: #34495e;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .peg:hover {
        transform: scale(1.1);
    }

    .color-0 { background-color: #e74c3c; }
    .color-1 { background-color: #2ecc71; }
    .color-2 { background-color: #3498db; }
    .color-3 { background-color: #f1c40f; }
    .color-4 { background-color: #9b59b6; }
    .color-5 { background-color: #e67e22; }

    .feedback {
        display: flex;
        gap: 5px;
        margin-left: 20px;
    }

    .feedback-peg {
        width: 15px;
        height: 15px;
        border-radius: 50%;
        background-color: #34495e;
    }

    .feedback-peg.correct {
        background-color: #2ecc71;
    }

    .feedback-peg.wrong-position {
        background-color: #f1c40f;
    }

    .color-picker {
        margin-top: 20px;
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 10px;
    }

    .colors {
        display: flex;
        gap: 10px;
    }

    .color-option {
        width: 30px;
        height: 30px;
        border-radius: 50%;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .color-option:hover {
        transform: scale(1.1);
    }

    .submit-btn {
        margin-top: 10px;
        padding: 8px 16px;
        background-color: #2ecc71;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .submit-btn:disabled {
        background-color: #95a5a6;
        cursor: not-allowed;
    }

    .submit-btn:hover:not(:disabled) {
        background-color: #27ae60;
    }

    .game-over {
        margin-top: 20px;
        text-align: center;
    }

    .new-game-btn {
        padding: 8px 16px;
        background-color: #3498db;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .new-game-btn:hover {
        background-color: #2980b9;
    }
</style>

@code {
    private int numberOfRows = 10;
    private int numberOfColumns = 4;
    private int[] secretCode;
    private int[][] guesses;
    private bool[] submittedRows;
    private int currentRow = 0;
    private bool gameOver = false;
    private bool isWin = false;
    private List<(int Correct, int WrongPosition)> rowFeedback = new();

    protected override void OnInitialized()
    {
        NewGame();
    }

    private void NewGame()
    {
        // Generate secret code
        secretCode = new int[numberOfColumns];
        var random = new Random();
        for (int i = 0; i < numberOfColumns; i++)
        {
            secretCode[i] = random.Next(6); // 6 colors (0-5)
        }

        // Initialize game state
        guesses = new int[numberOfRows][];
        for (int i = 0; i < numberOfRows; i++)
        {
            guesses[i] = new int[numberOfColumns];
            for (int j = 0; j < numberOfColumns; j++)
            {
                guesses[i][j] = -1; // -1 represents empty
            }
        }

        submittedRows = new bool[numberOfRows];
        rowFeedback = new List<(int, int)>();
        for (int i = 0; i < numberOfRows; i++)
        {
            rowFeedback.Add((0, 0));
        }

        currentRow = 0;
        gameOver = false;
        isWin = false;
    }

    private string GetPegClass(int row, int col)
    {
        return guesses[row][col] >= 0 ? $"color-{guesses[row][col]}" : "";
    }

    private async Task SelectColor(int row, int col)
    {
        if (row == currentRow && !submittedRows[row] && !gameOver)
        {
            guesses[row][col] = (guesses[row][col] + 1) % 6;
            await PlaySound("clickSound");
        }
    }

    private void SetSelectedColor(int colorIndex)
    {
        // Optional: Implement color selection logic
    }

    private bool CanSubmit()
    {
        if (gameOver || currentRow >= numberOfRows) return false;
        return !guesses[currentRow].Contains(-1);
    }

    private async Task SubmitGuess()
    {
        if (!CanSubmit()) return;

        var feedback = CheckGuess(guesses[currentRow]);
        rowFeedback[currentRow] = feedback;
        submittedRows[currentRow] = true;

        if (feedback.Correct == numberOfColumns)
        {
            gameOver = true;
            isWin = true;
            await PlaySound("winSound");
        }
        else if (currentRow == numberOfRows - 1)
        {
            gameOver = true;
            await PlaySound("loseSound");
        }
        else
        {
            await PlaySound("submitSound");
            currentRow++;
        }
    }

    private (int Correct, int WrongPosition) CheckGuess(int[] guess)
    {
        int correct = 0;
        int wrongPosition = 0;
        bool[] usedGuess = new bool[numberOfColumns];
        bool[] usedSecret = new bool[numberOfColumns];

        // Check correct positions
        for (int i = 0; i < numberOfColumns; i++)
        {
            if (guess[i] == secretCode[i])
            {
                correct++;
                usedGuess[i] = true;
                usedSecret[i] = true;
            }
        }

        // Check wrong positions
        for (int i = 0; i < numberOfColumns; i++)
        {
            if (usedGuess[i]) continue;
            
            for (int j = 0; j < numberOfColumns; j++)
            {
                if (!usedSecret[j] && !usedGuess[i] && guess[i] == secretCode[j])
                {
                    wrongPosition++;
                    usedSecret[j] = true;
                    usedGuess[i] = true;
                    break;
                }
            }
        }

        return (correct, wrongPosition);
    }

    private async Task PlaySound(string soundId)
    {
        await JSRuntime.InvokeVoidAsync("playSound", soundId);
    }
}
